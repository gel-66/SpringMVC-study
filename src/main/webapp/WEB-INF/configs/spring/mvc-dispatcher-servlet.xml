<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd  
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
        
        <!-- 本配置文件是工程名为mvc-dispatcher的DispatcherServlet使用，提供其相关的Spring MVC配置 -->
        
        <!--启用Spring基于annotation的DI，使用户可以在Spring MVC中使用Spring的强大功能 
        	激活@Required@Autowired,JSR 250's @PostConstruct, @PreDestroy and @Resource 等标注 -->
        <context:annotation-config/>
        
        <!-- DispatcherServlet上下文，只搜索@Controller 标注的类 不搜索其他标注的类 -->
        <context:component-scan base-package="com.gary.mvcdemo">
        	<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        </context:component-scan>
        <!-- HandlerMapping,无需配置，Spring MVC可以默认启动
        	DefaultAnnotationHandlerMapping annotation-driven HandlerMapping
         -->
        <!-- aspect servlet启用 基于annotation的handler mapping
        	扩充注解驱动，可以将请求参数绑定到控制器参数
        -->
        <mvc:annotation-driven/>
        
        <!-- 静态资源处理，css,js,imgs -->
        <mvc:resources location="/resources/" mapping="/resources/**"/>
        
        <!-- 配置ViewResolver 可以用多个ViewResolver。
        	使用order属性排序。
        	InternalResourceViewResolver放到最后 -->
        <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        	<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"></property>
        	<property name="prefix" value="/WEB-INF/jsps/"/>
        	<property name="suffix" value=".jsp"></property>
        </bean>
        
        <!-- 200*1024*1024即200M resolveLazily属性启用是为了推迟 文件解析，以便捕获文件大小异常-->
        <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        	<!-- 设置上传文件大小 -->
        	<property name="maxUploadSize" value="209715200"/>
        	<property name="defaultEncoding" value="UTF-8"/>
        	<property name="resolveLazily" value="true"/>
        </bean>
        
        <!-- 配置ViewResolver。 可以用多个ViewResolver。 使用order属性排序。 InternalResourceViewResolver放在最后。 -->
        <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		   <property name="mediaTypes">
		      <value>
		         html=text/html
		         json=application/json
		         json=application/callback
		         image=image/*
		      </value>
		   </property>
		   <property name="defaultContentType" value="text/html"/>
		</bean>
		
		<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		   <property name="contentNegotiationManager" ref="contentNegotiationManager"/>
		   <property name="defaultViews">
		      <list>
		         <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" />
		      </list>
		   </property>
		</bean>
        
 </beans>  
  	